/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0) uniform UBO 
{
	float time;
	float dx;
	float k;
	float omega;
	float amplitude;
} ubo;

layout(std430, binding = 1) buffer Height 
{
   float height[];
};

layout(std140, binding = 2) buffer Normal 
{
   vec4 normal[];
};

layout (local_size_x = 10, local_size_y = 10) in;

void main() 
{
    // Current SSBO index
    //uint index = gl_LocalInvocationID.x;
	uint index = gl_LocalInvocationIndex;	

	//uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	
	//uint index = 0;
	
    float value = 1.0;

	//for(int i = 0; i < height.length(); ++i)
	//{
	//	height[i] = 1.0;
	//}
	
	float kx = ubo.k * gl_LocalInvocationID.x * ubo.dx;
	
    height[index] = ubo.amplitude*sin(kx - ubo.omega*ubo.time);
	
	normal[index].x = -ubo.amplitude*cos(kx - ubo.omega*ubo.time);
	normal[index].y = 1.0;
	normal[index].z = 0.0;
	normal[index].w = 1.0;
}